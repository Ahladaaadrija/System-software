#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MEM_SIZE 65536  

unsigned char memory[MEM_SIZE];  

void printLoadedMemory(unsigned int startAddr, unsigned int length) {
    unsigned int addr = startAddr;
    unsigned int endAddr = startAddr + length;
    printf("\nLoaded Memory:\n");
    printf("Address\t\tContent\n");
    printf("-------------------------\n");

    while (addr < endAddr) {
        if (memory[addr] == 0xFF) {
           
            unsigned int gapStart = addr;
            while (addr < endAddr && memory[addr] == 0xFF) {
                addr++;
            }
            unsigned int gapEnd = addr - 1;
            if (gapStart == gapEnd) {
                printf("%04X\t\txx\n", gapStart);
            } else {
                printf("%04X-%04X\t", gapStart, gapEnd);
                for (unsigned int i = gapStart; i <= gapEnd; i++) {
                    printf("xx ");
                }
                printf("\n");
            }
        } else {
           
            printf("%04X\t\t%02X\n", addr, memory[addr]);
            addr++;
        }
    }
}

void loadObjectFile(const char *filename) {
    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("Error opening file.\n");
        return;
    }

    char recordType;
    char programName[10];
    unsigned int startAddr = 0, length = 0, execAddr = 0;
    char objCode[1000];

    memset(memory, 0xFF, sizeof(memory));

    while (fscanf(fp, " %c", &recordType) != EOF) {
        if (recordType == 'H') {
            fscanf(fp, "%s %x %x", programName, &startAddr, &length);
            printf("Program: %s\nStart Address: %04X\nLength: %04X\n\n", programName, startAddr, length);
        } else if (recordType == 'T') {
            unsigned int recStart, recLen;
            fscanf(fp, "%x %x %s", &recStart, &recLen, objCode);
            for (unsigned int i = 0; i < recLen; i++) {
                char byteStr[3] = { objCode[2 * i], objCode[2 * i + 1], '\0' };
                unsigned int byteVal = (unsigned int)strtol(byteStr, NULL, 16);
                memory[recStart + i] = (unsigned char)byteVal;
            }
        } else if (recordType == 'E') {
            fscanf(fp, "%x", &execAddr);
            printf("Execution start address: %04X\n\n", execAddr);
            break;
        } else {
            fgets(objCode, sizeof(objCode), fp);
        }
    }
    fclose(fp);

    printLoadedMemory(startAddr, length);
}

int main() {
    loadObjectFile("input1.txt");
    return 0;
}
